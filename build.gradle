import java.util.concurrent.TimeUnit;
plugins {
	id 'org.springframework.boot' version '2.5.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.Chess'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.5.3'
	// https://mvnrepository.com/artifact/org.hibernate.orm/hibernate-core
	implementation group: 'org.hibernate.orm', name: 'hibernate-core', version: '6.0.0.Alpha8'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
}


task compileSass() {
	ext.process = new ProcessBuilder()
            .directory(projectDir)
            .command("npm", "run", "sass")
            .start();
	ext.process.waitFor(5,TimeUnit.SECONDS);//wait for command to be executed
	ext.process.destroy();
	ext.process.waitFor(5,TimeUnit.SECONDS);//wait for destory to happen
	ext.process.destroyForcibly();//if stuck then kill process 
	ext.process.waitFor();//wait for kill Process to happen
	
	doLast {
		println "\u001B[32m"+"compileSass done!"
	}
	// ext.output = { //for access to external output if needed
	// 	return "\u001B[32m"+standardOutput.toString();
	// }
	timeout = Duration.ofMinutes(1)
}

task compileTS() {
	ext.process = new ProcessBuilder()
            .directory(projectDir)
            .command("npm", "run", "tsc")
            .start();

	ext.process.waitFor(5,TimeUnit.SECONDS);
	ext.process.destroy();
	ext.process.waitFor(5,TimeUnit.SECONDS);
	ext.process.destroyForcibly();
	ext.process.waitFor();

	
	doLast { 
		println "\u001B[32m"+"compileTS done!"
	}
	// ext.output = { //for access to external output if needed
	// 	return "\u001B[32m"+standardOutput.toString();
	// }
	timeout = Duration.ofMinutes(1)
}


/* Extends build to have compileSass and compileTS run before it
whenever build or bootRun is called
 */

build.dependsOn compileSass, compileTS